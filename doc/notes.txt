Vision
	- insight never achieved before in your project based on the source code and its history
		- there is a huge amount of untapped information in source control systems
		- it might be fun to look at it
		- it might provide insights in your troubles
		- it might even contribute something to the software development field in general
			- common historical patterns, evolutions formulated in a new way
			- understanding why projects fail, common problems, causes
			- 

Feature level thinking:
	- what do I want to do: 
		- create a project
		- configure the source control
		- read a full history
		- incremental update of history
		- evolution over time of metrics
			- show loc history
			- show class count history
			- show average method count history
			- show average method length history
		- show largest class, longest method
			- show a class history
				- class metrics: LOC, methods, coupling, coherence etc.
				- show a method history: what metrics? loc, coupling, levels of abstraction
				- show coupling for a class (afferent and efferent)
				- show coupling history
		- source code telemetry for a spot
			solution, project, component, class, method level
		- authors
		- author statistics
		- integrate with issue tracking
			- bugs
			- features
			- estimates
		- cross reference authors with issues
		- how about branches?

	- source control systems
		- TFS and Git
		- mercurial, svn
		- others

	- languages
		- C#
		- C/C++/ObjectiveC
		- JS

	- usage patterns
		- archeology: analyze an existing project
		- telemetry: set up for a new project, run it continuously
			- hooks for each commit
			- offer/sell as service

	- in-house service available for all projects

Architecture level thinking
	- source control adapter
		- performance: how long/big will be taking a full history
	- history reader (activity)
		- what activities are there?
			- add new, modify, delete, rename
	- data storage
		- SQL
		- NoSQL (mongodb looks promising)
		- how big it's gonna be?
	- semantic processing:
		- Roslyn
		- libclang
		- how do we parse JS? (JSLint?)
	- what application type?
		- console tools/services
		- web application
		- web service(s)
	- security
		- source control authentication
		- source code security: authorization

Planning
	- priorities
		- TFS and Git support
		- LOC for projects
		- basic semantics for C# (class count) using Roslyn
		- basic semantics for C++/ObjC (class count) using libclang
		- advanced semantics for C#
		- advances semantics for C++/ObjC
